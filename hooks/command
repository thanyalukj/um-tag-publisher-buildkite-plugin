#!/usr/bin/env bash

set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

## Source functions.bash based on environment
## local environment = BUILDKITE_BUILD_ID is not set
## Buildkite environment = BUILDKITE_BUILD_ID is set
BUILD_ID=${BUILDKITE_BUILD_ID:-""}
if [ ! $BUILD_ID == "" ]; then
  # shellcheck source=lib/functions.bash
  # shellcheck disable=SC1091
  source "$DIR/../lib/functions.bash"
fi

## Setup variables needs to tag and publish
PLATFORM="$BUILDKITE_PLUGIN_UM_TAG_PUBLISHER_PLATFORM"
TAG_NAME="$BUILDKITE_PLUGIN_UM_TAG_PUBLISHER_TAG_NAME"
FILE_PATH="$BUILDKITE_PLUGIN_UM_TAG_PUBLISHER_FILE_PATH"
CREATE_RELEASE="$BUILDKITE_PLUGIN_UM_TAG_PUBLISHER_CREATE_RELEASE"
BRANCH=${BUILDKITE_BRANCH:-""}
SKIP=$(buildkite-agent meta-data get 'skip-publish' --default 'true')

echo "PLATFORM: $PLATFORM"
echo "TAG_NAME: $TAG_NAME"
echo "FILE_PATH: $FILE_PATH"

if [[ $FILE_PATH == "" ]]; then
  echo "No file path provided, exiting"
  exit 1
fi

if [[ $BRANCH == "" ]]; then
  echo "BUILDKITE_BRANCH is not set, exiting"
  exit 1
fi

echo "BRANCH: $BRANCH"
echo "SKIP_PUBLISH: $SKIP"
echo "-----------------------------"

if [[ "$SKIP" == "true" ]]; then
  echo "--- Skipping publish as skip-publish was set to true"
  exit 0
fi

##############################################################################
## Publish the tag to GitHub
## This will create a tag with the name of the platform and the version and
## publish it to GitHub
##############################################################################

TAG_VERSION=$(get_platform_version_strings "$PLATFORM" "$FILE_PATH")
TAG="$TAG_NAME/$TAG_VERSION"

echo "TAG_VERSION: $TAG_VERSION"
echo "TAG: $TAG"

## Tag and Publish to GitHub
message="$BUILDKITE_ORGANIZATION_SLUG/$BUILDKITE_PIPELINE_SLUG: Build $BUILDKITE_BUILD_NUMBER for $BUILDKITE_BRANCH"
username="$BUILDKITE_BUILD_CREATOR"
email="$BUILDKITE_BUILD_CREATOR_EMAIL"

# transform git@github.com:fanduel/{repo_name}.git to github.com/fanduel/{repo_name}
repo_url=$(echo "${BUILDKITE_REPO}" | sed -e 's/^git@//' -e 's/\.git$//' -e 's/:/\//')

echo "--- Setting username - ${username}"
git config user.name "$username"
echo "--- Setting email - ${email}"
git config user.email "$email"

# Fetch all tags before we check them
git fetch --tags

echo "--- :label: Tagging with ${TAG}"
git tag "${TAG}" -m "${message}"

if ! git push origin "$TAG"; then
  echo "--- :warning: Tag already exists"
  buildkite-agent annotate "Failed to push tag \`$TAG\` as [it already exists](https://$repo_url/releases/tag/$TAG)." --style 'error' --context "$TAG_NAME-tag-push"
  exit 1
else
  echo "--- :white_check_mark: Tag pushed successfully"
  buildkite-agent annotate "Successfully tagged \`$TAG\`" --style 'success' --context "$TAG_NAME-tag-push"
fi

##############################################################################
## Create a release on GitHub if the CREATE_RELEASE variable is set to true
## This will create a release with the tag name and the commit message
##############################################################################

if [[ "$TAG" == "" || "$TAG" == *"alpha"* ]]; then
  echo "--- :double_vertical_bar: Skip a release for alpha version: $TAG"
  exit 0
fi

if [[ ! "${CREATE_RELEASE:-on}" =~ ^(true|on|1)$ ]]; then
  echo "--- :double_vertical_bar: Skipping release creation as create_release was set to false"
  exit 0
fi

# Create a GitHub Release
echo "--- :white_check_mark: Creating a release for version: $TAG"  

# transform git@github.com:fanduel/{repo_name}.git to {repo_name}
repo_name=$(echo "${BUILDKITE_REPO}" | sed -e 's/^git@github.com:fanduel\///' -e 's/\.git$//')
new_release=$(curl -L \
  -X POST \
  -H "Content-Type: application/json" \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/fanduel/${repo_name}/releases \
  -d '{"TAG": "'"${TAG}"'","target_commitish":"main","name":"'"${TAG}"'","draft":false,"prerelease":false,"generate_release_notes":true}')

echo $new_release